import "strings"

providers = {
	"aws": {
		"alias": "",
		"config": {
			"region": {
				"constant_value": "us-east-2",
			},
		},
		"full_name":           "registry.terraform.io/hashicorp/aws",
		"module_address":      "",
		"name":                "aws",
		"provider_config_key": "aws",
		"version_constraint":  "~> 4.0",
	},
	"random": {
		"alias":               "",
		"config":              {},
		"full_name":           "registry.terraform.io/hashicorp/random",
		"module_address":      "",
		"name":                "random",
		"provider_config_key": "random",
		"version_constraint":  "",
	},
}

resources = {
	"aws_s3_bucket.sentinel-part3": {
		"address": "aws_s3_bucket.sentinel-part3",
		"config": {
			"bucket": {
				"references": [
					"random_uuid.uuid.result",
					"random_uuid.uuid",
				],
			},
			"tags": {
				"constant_value": {
					"Department":  "Engineering",
					"Environment": "Development",
					"Project":     "Demo",
				},
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "sentinel-part3",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket",
	},
	"aws_s3_bucket_acl.sentinel-part3": {
		"address": "aws_s3_bucket_acl.sentinel-part3",
		"config": {
			"acl": {
				"constant_value": "private",
			},
			"bucket": {
				"references": [
					"aws_s3_bucket.sentinel-part3.id",
					"aws_s3_bucket.sentinel-part3",
				],
			},
		},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "sentinel-part3",
		"provider_config_key": "aws",
		"provisioners":        [],
		"type":                "aws_s3_bucket_acl",
	},
	"random_uuid.uuid": {
		"address":             "random_uuid.uuid",
		"config":              {},
		"count":               {},
		"depends_on":          [],
		"for_each":            {},
		"mode":                "managed",
		"module_address":      "",
		"name":                "uuid",
		"provider_config_key": "random",
		"provisioners":        [],
		"type":                "random_uuid",
	},
}

provisioners = {}

variables = {}

outputs = {}

module_calls = {}

strip_index = func(addr) {
	s = strings.split(addr, ".")
	for s as i, v {
		s[i] = strings.split(v, "[")[0]
	}

	return strings.join(s, ".")
}
