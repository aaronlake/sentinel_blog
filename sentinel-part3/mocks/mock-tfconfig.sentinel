import "strings"
import "types"

_modules = {
	"root": {
		"data":    {},
		"modules": {},
		"outputs": {},
		"providers": {
			"aws": {
				"alias": {
					"": {
						"config": {
							"region": "us-east-2",
						},
						"references": {
							"region": [],
						},
						"version": "~> 4.0",
					},
				},
				"config": {
					"region": "us-east-2",
				},
				"references": {
					"region": [],
				},
				"version": "~> 4.0",
			},
			"random": {
				"alias": {
					"": {
						"config":     {},
						"references": {},
						"version":    "",
					},
				},
				"config":     {},
				"references": {},
				"version":    "",
			},
		},
		"resources": {
			"aws_s3_bucket": {
				"sentinel-part3": {
					"config": {
						"tags": {
							"Department":  "Engineering",
							"Environment": "Development",
							"Project":     "Demo",
						},
					},
					"provisioners": null,
					"references": {
						"bucket": [
							"random_uuid.uuid.result",
							"random_uuid.uuid",
						],
						"tags": [],
					},
				},
			},
			"aws_s3_bucket_acl": {
				"sentinel-part3": {
					"config": {
						"acl": "private",
					},
					"provisioners": null,
					"references": {
						"acl": [],
						"bucket": [
							"aws_s3_bucket.sentinel-part3.id",
							"aws_s3_bucket.sentinel-part3",
						],
					},
				},
			},
			"random_uuid": {
				"uuid": {
					"config":       {},
					"provisioners": null,
					"references":   {},
				},
			},
		},
		"variables": {},
	},
}

module_paths = [
	[],
]

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
modules = _modules.root.modules
providers = _modules.root.providers
resources = _modules.root.resources
variables = _modules.root.variables
outputs = _modules.root.outputs
